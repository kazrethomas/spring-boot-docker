pipeline {
  environment {
    PROJECT = "sandbox-io-289003"
    APP_NAME = "newest"
    FE_SVC_NAME = "${APP_NAME}-frontend"
    CLUSTER = "jenkins-cd"
    CLUSTER_ZONE = "us-east1-d"
    IMAGE_TAG = "gcr.io/${PROJECT}/${APP_NAME}:${env.BRANCH_NAME}.${env.BUILD_NUMBER}"
    JENKINS_CRED = "${PROJECT}"
  }

  agent {
    kubernetes {
      label 'my-agent'
      defaultContainer 'jnlp'
      yaml """
      apiVersion: v1
      kind: Pod
      metadata:
        labels:
          app: my-agent
      spec:
        serviceAccountName: cd-jenkins
        containers:
        - name: nodejs
          image: node:latest
          command:
          - cat
          tty: true
        - name: python
          image: python:latest
          command:
          - cat
          tty: true
        - name: mysql
          image: mysql:latest
          command:
          - cat
          tty: true
        - name: kaniko
          image: gcr.io/kaniko-project/executor:v1.6.0-debug
          imagePullPolicy: Always
          command:
          - sleep
          args:
          - 99d
      """
    }
  }

  stages {

    stage('Run MySQL') {
      steps {
        container('mysql') {
          sh 'mysql --version' // print MySQL version
        }
      }
    }

    stage('Run Python') {
      steps {
        container('python') {
          sh 'pip list'
        }
      }
    }

    stage('Run Node.js') {
      steps {
        container('nodejs') {
          sh 'pwd'
        }
      }
    }

    stage('Build and push image with Google Container Registry') {
      steps {
        container('kaniko') {
          dir("spring-boot-app") {
            // No access to docker deamon so kaniko is the best option to build docker within kubernetes jenkins agent
            // The equivilant to docker build, tag and push
           sh "/kaniko/executor -f `pwd`/Dockerfile -c `pwd` --insecure --skip-tls-verify --cache=true --destination=${IMAGE_TAG}"
          }
        }
      }

    stage('Deploy to kubernetes') {
      steps {
        container('kubectl') {
          dir("spring-boot-app") {
           sh "kubectl apply -f deployment.yaml"
          }
        }
      }
    }
  } 
} 
